@using HydroToolChain.Client.Business.Abstracts
@using HydroToolChain.App.Configuration.Data

@implements IDisposable;
@inject IAppFacade Facade;

<div class="guid-item flex grow @_selectedClass" @onclick="@SelectGuid">
    <div class="guid-item-name">
        <Button @ondblclick="@OnNameDblClick" class="@(_isNameDisabled ? "" : "hidden")">@Item.Name</Button>
        <input @ref="_nameElement" class="@(_isNameDisabled ? "hidden" : "")" type="text" @onchange="@(e => OnValueChange(e, ValueChanged.Name))" Value="@Item.Name" onblur="@OnNameBlur">
    </div>
    <div class="guid-item-retail-uid">
        <Button @ondblclick="@OnRetailGuidDblClick" class="@(_isRetailGuidDisabled ? "" : "hidden")">@Item.RetailGuid.ToString("N").ToUpper()</Button>
        <input @ref="_retailGuidElement" class="@(_isRetailGuidDisabled ? "hidden" : "")" @onchange="@(e => OnValueChange(e, ValueChanged.RetailGuid))" type="text" Value="@Item.RetailGuid" onblur="@OnRetailGuidBlur">
    </div>
    <div class="guid-item-modded-uid">
        <Button @ondblclick="@OnModdedGuidDblClick" class="@(_isModdedGuidDisabled ? "" : "hidden")">@Item.ModdedGuid.ToString("N").ToUpper()</Button>
        <input @ref="_moddedGuidElement" class="@(_isModdedGuidDisabled ? "hidden" : "")" @onchange="@(e => OnValueChange(e, ValueChanged.ModdedGuid))" type="text" Value="@Item.ModdedGuid" onblur="@OnModdedGuidBlur">
    </div>
</div>
 
@code {

    [Parameter]
    public GuidData Item { get; set; } = null!;

    ElementReference _nameElement;
    private bool _isNameDisabled = true;
    private bool _isNameDisabledRender;
    
    ElementReference _retailGuidElement;
    private bool _isRetailGuidDisabled = true;
    private bool _isRetailGuidDisabledRender;
    
    ElementReference _moddedGuidElement;
    private bool _isModdedGuidDisabled = true;
    private bool _isModdedGuidDisabledRender;

    private string _selectedClass = "";

    protected override void OnParametersSet()
    {
        OnGuidChange(Facade.GetCurrentGuid()?.Id ?? Guid.Empty);
    }
    
    protected override void OnInitialized()
    {
        Facade.OnGuidChanged += OnGuidChange;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!_isNameDisabled && _isNameDisabledRender)
        {
            _nameElement.FocusAsync();
            _isNameDisabledRender = false;
        }
        if (!_isRetailGuidDisabled && _isRetailGuidDisabledRender)
        {
            _retailGuidElement.FocusAsync();
            _isRetailGuidDisabledRender = false;
        }
        
        if (!_isModdedGuidDisabled && _isModdedGuidDisabledRender)
        {
            _moddedGuidElement.FocusAsync();
            _isModdedGuidDisabledRender = false;
        }
    }

    private void OnNameDblClick()
    {
        _isNameDisabled = false;
        _isNameDisabledRender = true;
    }

    private void OnRetailGuidDblClick()
    {
        _isRetailGuidDisabled = false;
        _isRetailGuidDisabledRender = true;
    }

    private void OnModdedGuidDblClick()
    {
        _isModdedGuidDisabled = false;
        _isModdedGuidDisabledRender = true;
    }

    private void OnNameBlur()
    {
        _isNameDisabled = true;
    }

    private void OnRetailGuidBlur()
    {
        _isRetailGuidDisabled = true;
    }

    private void OnModdedGuidBlur()
    {
        _isModdedGuidDisabled = true;
    }

    private void SelectGuid()
    {
        Facade.SetCurrentGuid(Item.Id);
    }

    public void Dispose()
    {
        Facade.OnGuidChanged -= OnGuidChange;
    }

    private void OnGuidChange(Guid newGuid)
    {
        _selectedClass = newGuid == Item.Id ? "selected" : "";
        InvokeAsync(StateHasChanged);
    }
    
    private void OnValueChange(ChangeEventArgs e, ValueChanged changed)
    {
        switch (changed)
        {
            case ValueChanged.Name:
                Item.Name = e.Value as string ?? "New Guid";
                
                break;
            case ValueChanged.RetailGuid:
                try
                {
                    Item.RetailGuid = Guid.Parse(e.Value as string ?? "");
                }
                catch (FormatException)
                {
                    Item.RetailGuid = Guid.Empty;
                }
                
                break;
            case ValueChanged.ModdedGuid:
                try
                {
                    Item.ModdedGuid = Guid.Parse(e.Value as string ?? "");
                }
                catch (ArgumentNullException)
                {
                    Item.ModdedGuid = Guid.Empty;
                }
            
                break;
        }
        
        Facade.UpdateItem(Item);
        StateHasChanged();
    }

    enum ValueChanged
    {
        Name,
        RetailGuid,
        ModdedGuid
    }
}