@using HydroToolChain.Client.Business.Abstracts
@using HydroToolChain.App.Configuration.Data
@using HydroToolChain.App.Configuration

@implements IDisposable;

@inject IAppFacade Facade;
@inject IWritableOptions<AppData> AppDataOptions;

<div class="uid-tab flex column">
    <div class="uid-tab__header flex row">
        <button class="btn btn--secondary" @onclick="@Facade.AddUid">Add Uid</button>
        <button class="btn btn--secondary" @onclick="@Facade.RemoveUid">Remove Uid</button>
    </div>
    <div class="uid-tab__content flex column grow">
        <div class="uid-tab__content__table flex column">
            <div class="uid-tab__content__table-header flex grow">
                <div class="uid-tab__content__table-header-name flex">Name</div>
                <div class="uid-tab__content__table-header-retail-uid flex">Retail UID</div>
                <div class="uid-tab__content__table-header-modded-uid flex">Modded UID</div>
            </div>
            <div class="uid-tab__content__table-body flex column">
            @foreach (var item in Items)
            {
                <UidItem Item="@item"></UidItem>
            }
            </div>
        </div>
    </div>
</div>


@code {
    private List<UidData> Items { get; set; } = new();
    
    protected override void OnInitialized()
    {
        Facade.OnAppStateChanged += OnStateUpdated;
        Items = AppDataOptions.Value.Uids;
    }

    private void OnStateUpdated()
    {
        Items = AppDataOptions.Value.Uids;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Facade.OnAppStateChanged -= OnStateUpdated;
    }
}