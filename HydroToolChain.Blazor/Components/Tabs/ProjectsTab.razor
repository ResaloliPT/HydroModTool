@inherits AppComponentBase;

@inject IAppFacade Facade;
@inject StateWatchers _StateWatchers;

<MudGrid Spacing="0" Justify="Justify.FlexStart">
    <MudItem sm="12">
        <MudToolBar>
            <MudButton Variant="Variant.Filled" OnClick="@(() => Facade.AddProject(CancellationToken))">Add Project</MudButton>
            <MudSpacer/>
            <MudButtonGroup Variant="Variant.Filled">
                <MudButton OnClick="@(() => Facade.Stage(CancellationToken))">Stage</MudButton>
                <MudButton OnClick="@(() => Facade.Package(CancellationToken))">Package</MudButton>
                <MudButton OnClick="@(() => Facade.Copy(CancellationToken))">Copy</MudButton>
                <MudButton OnClick="@Facade.LaunchGame">Launch Game</MudButton>
                <MudTooltip Text="Do all steps in one click">
                    <MudButton OnClick="@(() => Facade.DevExpress(CancellationToken))">Dev Express</MudButton>
                </MudTooltip>
            </MudButtonGroup>
            <MudSpacer/>
            <MudButtonGroup Variant="Variant.Filled">
                <MudButton OnClick="@Facade.ClearLegacyMods">Clear Legacy Mods</MudButton>
                <MudButton OnClick="@Facade.OpenModsFolder" >Mods Folder</MudButton>
            </MudButtonGroup>
        </MudToolBar>
    </MudItem>
    <MudItem sm="3" Style="border-right: 1px solid var(--mud-palette-dark); height: calc(100vh - 168.5px); overflow-y: auto">
        <MudList Clickable SelectedValue="_selectedItem">
            @foreach (var project in _projects)
            {
                <MudListItem Expanded Value="project.Id" OnClick="@(() => OnProjectChange(project.Id))">
                    <ContextMenuTrigger MenuId="@ContextMenusIds.ProjectItemContextMenu" Data="@project.Id">
                        <MudText Typo="Typo.h5" Style="overflow-wrap: anywhere">@project.Name</MudText>
                    </ContextMenuTrigger>
                </MudListItem>
            }
        </MudList>
    </MudItem>
    
    <MudItem sm="9">
        <ContextMenuTrigger MenuId="@ContextMenusIds.AssetsContextMenu">
            <MudTreeView T="ProjectAssetItem" Items="_assetItems" Hover Height="calc(100vh - 168.5px)">
                <ItemTemplate Context="item">
                    <ContextMenuTrigger MenuId="@ContextMenusIds.AssetsContextMenu" Data="@item">
                        <MudTreeViewItem Items="@item.TreeItems" @bind-Expanded="@item.IsExpanded">
                            <Content>
                                <MudTreeViewItemToggleButton @bind-Expanded="@item.IsExpanded" Visible="@item.HasChild"/>
                                <span>@item.DisplayName</span>
                            </Content>
                        </MudTreeViewItem>
                    </ContextMenuTrigger>
                </ItemTemplate>
            </MudTreeView>
        </ContextMenuTrigger>
    </MudItem>
</MudGrid>

@code
{
    private IReadOnlyCollection<ProjectState> _projects = Array.Empty<ProjectState>();
    
    private HashSet<ProjectAssetItem> _assetItems = new();
    
    private object? _selectedItem = null;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _StateWatchers.OnProjectChanged += OnProjectChanged;
        _StateWatchers.OnSelectedProjectChanged += OnSelectedProjectChanged;

        LoadProjects();
    }

    private void OnSelectedProjectChanged()
    {
        _selectedItem = Facade.GetCurrentProject().project!.Id;
        UpdateView();
    }

    private void OnProjectChanged()
    {

        LoadProjects();
        
        
        UpdateView();
    }


    private void LoadProjects()
    {
        _projects = Facade.GetProjects();
        var currentProject = Facade.GetCurrentProject();
        if (currentProject.project == null)
            return;
        
        _assetItems = TreeHelpers.GetTreeNodesFromProject(currentProject.items);
        _selectedItem = currentProject.project.Id;
    }
    
    private void OnProjectChange(object value)
    {
        if (value is not Guid projectId)
        {
            return;
        }
        
        Facade.SetCurrentProject(projectId, CancellationToken);
    }

    public override void DisposeComponent()
    {
        _StateWatchers.OnProjectChanged -= OnProjectChanged;
    }
}
